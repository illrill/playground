name: pr-bot
on:
  pull_request:
    types:
      - opened
      - reopened
      - converted_to_draft
  issue_comment:
    types:
      - created

defaults:
  run:
    shell: bash

permissions:
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}

jobs:
  intro:
    # Triggered by pull_request opened
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Introduce myself
        run: |
          gh issue comment ${{ github.event.number }} --body-file - <<EOF
          Hi :wave: I'm a bot that helps with PRs. I understand the following slash commands:

          | Command | Description |
          | ------- | ----------- |
          | /e2e-test hold | Hold automatic execution of end-to-end test until further notice |
          | /e2e-test auto | Execute end-to-end test and do so for every new commit to this PR |
          | /e2e-test skip | Skip end-to-end testing of this PR |

          I only listen to commands posted by maintainers.
          EOF
  default:
    runs-on: ubuntu-latest
    # Triggered by pull_request opened, reopened, or converted_to_draft
    if: github.event_name == 'pull_request' 
    steps:
      - uses: actions/checkout@v4
      # /e2e-test
      - name: Add or reset default label e2e-test/hold
        run: |
          _new="e2e-test/hold"
          _old=$(gh pr view ${{ github.event.number }} --json labels --jq .labels[].name | grep 'e2e-test/' || true)
          _delete=${_old[@]/$_new} && _delete=$(echo $_delete | tr ' ' ,)
          gh issue edit ${{ github.event.number }} --add-label "${_new}" --remove-label "${_delete}"
  commands:
    runs-on: ubuntu-latest
    # Triggered by pull request comment
    if: github.event.issue.pull_request
    steps:
      - uses: actions/checkout@v4
      - id: authorize
        name: Check if user is authorized to use slash commands
        env:
          COMMENT_CREATOR: "${{ github.event.comment.user.login }}"
        run: |
          _authorized=$(gh api repos/${{ github.repository }}/collaborators/${COMMENT_CREATOR}/permission --jq .user.permissions.maintain)
          echo authorized=$_authorized >> $GITHUB_OUTPUT
          if [ $_authorized != "true" ]; then
            gh issue comment ${{ github.event.issue.number }} --body "Sorry @${COMMENT_CREATOR}, only maintainers are allowed to use slash commands."
          fi
      # /e2e-test
      - name: Transfer /e2e-test command to label
        if: steps.authorize.outputs.authorized == 'true'
        env:
          COMMENT_BODY: "${{ github.event.comment.body }}"
        run: |
          _regex="\/e2e-test (hold|auto|skip)"
          if [[ ${COMMENT_BODY} =~ ${_regex} ]]; then
            _new="e2e-test/${BASH_REMATCH[1]}"
            _old=$(gh pr view ${{ github.event.issue.number }} --json labels --jq .labels[].name | grep 'e2e-test/' || true)
            _delete=${_old[@]/$_new} && _delete=$(echo $_delete | tr ' ' ,)
            gh issue edit ${{ github.event.issue.number }} --add-label "${_new}" --remove-label "${_delete}"
          fi
